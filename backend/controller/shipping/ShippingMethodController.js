const Shipping = require("../../model/ShippingMethod");

// üÜï T·∫°o ph∆∞∆°ng th·ª©c giao h√†ng
const createShipping = async (req, res) => {
    try {
        let { name, description, type, shippingFees, codFee, status } = req.body;

        if (!name || !type) {
            return res.status(400).json({ success: false, message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ‚ùó" });
        }

        // N·∫øu l√† "Nh·∫≠n t·∫°i c·ª≠a h√†ng", ƒë·∫∑t ph√≠ v·∫≠n chuy·ªÉn = 0, ph√≠ COD = 0
        if (type === "store_pickup") {
            shippingFees = [];  // G√°n l·∫°i gi√° tr·ªã h·ª£p l·ªá
            codFee = 0;
        }

        // N·∫øu l√† "Giao h√†ng COD" v√† ch∆∞a c√≥ ph√≠ COD, ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† 0
        if (type === "cod" && codFee === undefined) {
            codFee = 0;
        }

        const newShipping = new Shipping({ name, description, type, shippingFees, codFee, status });
        await newShipping.save();

        res.status(201).json({ success: true, message: "T·∫°o ph∆∞∆°ng th·ª©c giao h√†ng th√†nh c√¥ng ‚úÖ", data: newShipping });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói khi t·∫°o ph∆∞∆°ng th·ª©c giao h√†ng ‚ùó", error: error.message });
    }
};
// üì• L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c giao h√†ng
const getAllShippings = async (req, res) => {
    try {
        const shippings = await Shipping.find();
        res.status(200).json({ success: true, data: shippings });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch ‚ùó", error: error.message });
    }
};

// üìå L·∫•y th√¥ng tin chi ti·∫øt ph∆∞∆°ng th·ª©c giao h√†ng
const getShippingById = async (req, res) => {
    try {
        const shipping = await Shipping.findById(req.params.id);
        if (!shipping) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c giao h√†ng ‚ùå" });
        }
        res.status(200).json({ success: true, data: shipping });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói khi l·∫•y th√¥ng tin ‚ùó", error: error.message });
    }
};

// üîÑ C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c giao h√†ng
const updateShipping = async (req, res) => {
    try {
        const { name, description, type, shippingFees, codFee, status } = req.body;

        if (!name || !type) {
            return res.status(400).json({ success: false, message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ‚ùó" });
        }

        const updatedShipping = await Shipping.findByIdAndUpdate(
            req.params.id,
            { name, description, type, shippingFees, codFee, status },
            { new: true }
        );

        if (!updatedShipping) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c giao h√†ng ‚ùå" });
        }

        res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng ‚úÖ", data: updatedShipping });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t ‚ùó", error: error.message });
    }
};

// ‚ùå X√≥a ph∆∞∆°ng th·ª©c giao h√†ng
const deleteShipping = async (req, res) => {
    try {
        const shipping = await Shipping.findByIdAndDelete(req.params.id);
        if (!shipping) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c giao h√†ng ‚ùå" });
        }
        res.status(200).json({ success: true, message: "X√≥a th√†nh c√¥ng ‚úÖ" });
    } catch (error) {
        res.status(500).json({ success: false, message: "L·ªói khi x√≥a ‚ùó", error: error.message });
    }
};

module.exports = { createShipping, getAllShippings, getShippingById, updateShipping, deleteShipping };
